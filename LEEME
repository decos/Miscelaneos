COMPONENTES, DIRECTIVAS DE ATRIBUTOS, CICLO DE VIDA Y MÁS

	CREANDO EL PROYECTO DE ESTA SECCIÓN - MISCELÁNEOS
	
		RECURSOS: 
		- FONT-AWESOME: Libreria de ICONOS
			http://fontawesome.io/

		- Suponiendo que la libreria no tiene un metodo de instalación mediante npm,
		
		- Descargamos lo siguiente:
			BOOTSTRAP (4.0)
			https://getbootstrap.com/docs/4.0/getting-started/download/

			JQUERY (Compressed, production 3.2.1 slim build)
			https://jquery.com/download/
		
			TETHER (1.3.3, libreria que usa bootstrap)
			http://tether.io/

		- Creamos en el directorio src/assets los siguientes directorios:
			BOOTSTRAP4: 
				- CSS: bootstrap.min.css, bootstrap.min.css.map
				- JS: bootstrap.min.js 
			TETHER: tether/dist/js/tether.min.js
			JQUERY: el archivo por defecto	


		1. Configurar el archivo ".angular-cli.json"
			- Agregar en styles:
				"assets/b4/css/bootstrap.min.css"
			- Agregar en scripts:
				"assets/jquery/jquery.slim.min.js",
				"assets/tether/tether.min.js",
				"assets/b4/js/bootstrap.min.js"


		2. Reiniciar el servidor

		3. Copiar la carpeta completa de font-awesome en "assets" y dejarlo con el 
			siguiente nombre: font-awesome y agregar la ruta en "styles"

			- Agregar en styles:
				"assets/font-awesome/css/font-awesome.css"

		4. Modificar la siguiente vista para mostrar un icono de font-awesome
			src/app/app.component.html
			

		ERROR: Propper.js
		SOLVED: Instalar todos los ficheros del Bootstrap CDN
			https://v4-alpha.getbootstrap.com/


	ngStyle Y SU USO CON DIRECTIVAS DE ATRIBUTOS
		
		- NgStyle = Es una directiva que permite aplicar estilos en el html en caliente
		- Tres formas de aplicarlo:
			1. Usando un objeto literal
				<some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
			2. Mandando una expresión (con un punto)
				<some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
			3. Recibiendo un objeto completo			
				<some-element [ngStyle]="objExp">...</some-element>

		
		1. Crear el estilo .main-container
			src/styles.css

		2. Crear el directorio components dentro de "app"

		3. Crear el componente "ngStyle" 
			ng g c components/ngStyle -it -is
			-it = inline template (en el mismo archivo)
			-is = inline style (en el mismo archivo)

		- Eliminar el siguiente archivo: ng-style.component.spec.ts

		4. Codear el componente "ngStyle"
			src/app/components/ng-style/ng-style.component.ts
		
			Una manera:
				<p [ngStyle]="{ 'font-size' : tamano + 'px', 'color' : 'red' }">
			
			Otra manera:
				<p [style.fontSize]=" '40px' ">
				<p [style.fontSize.px]=" tamano ">

		
		5. Agregar el componente "ngStyle" al component principal de la applicación
			src/app/app.component.html


	APLICANDO CSS A UN SOLO COMPONENTE

		1. Crear un componente llamado "css"
			 ng g c components/css -it -is
		
		2. Codear el nuevo componente creado y agregarlo a la vista principal
			src/app/app.component.html

		3. Agregar a "styles" configuración de CSS
			src/app/components/css/css.component.ts			

			styles: [`
			    p {
			      color: red;
			      font-size: 20px;
			    }
			    `
			  ]


		4. Agregar al fichero css del componente principal lo siguiente:
			src/app/app.component.css
			
			p {
			  color: blue !important ;
			}

		- Revisar las diferencias, uno es rojo, el otro azul


	ngClass - AGREGANDO CLASES DE ESTILOS A NUESTROS ELEMENTOS HTML

		- El NgClass es una directiva que se va usar mucho más que el NgStyle, 
		por lo general cuando se tiene muchas propiedades css , se debe usar una clase.
		
		1. Comentar la linea del componente CSS en la vista principal

		2. Comentar las propiedades agregadas al css principal
		
		3. Crear un nuevo componente llamado clases
			ng g c components/clases -is

		4. Agregar la alerta en la vista del componente "clases"
			src/app/components/clases/clases.component.html

		- Prueba 1
			<div class="alert alert-info" role="alert">
			es igual:
			<div [ngClass]="'alert-info'" class="alert" role="alert">

		- Prueba 2
			.ts => alerta : string = "alert-danger";
			.html => <div [ngClass]="alerta" class="alert" role="alert">

		- Prueba 3
			Agregar dos botones en la vista y al hacer clic en cada boton la alerta
			debera cambiar de color.
			src/app/components/clases/clases.component.html
		
		- Prueba 4
			Utilizar un objeto para controlar una propiedad directa
			
			propiedades:Object = {
    				danger:false
		  	}

		- Prueba 5
			Al hacer clic en el boton "Cambiar" la etiqueta H3 (Propiedades) debe
			modificarse.





